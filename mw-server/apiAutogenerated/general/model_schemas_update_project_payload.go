/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemasUpdateProjectPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasUpdateProjectPayload{}

// SchemasUpdateProjectPayload struct for SchemasUpdateProjectPayload
type SchemasUpdateProjectPayload struct {
	IsPrivate NullableBool `json:"isPrivate,omitempty"`
	Name NullableString `json:"name,omitempty"`
}

// NewSchemasUpdateProjectPayload instantiates a new SchemasUpdateProjectPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasUpdateProjectPayload() *SchemasUpdateProjectPayload {
	this := SchemasUpdateProjectPayload{}
	return &this
}

// NewSchemasUpdateProjectPayloadWithDefaults instantiates a new SchemasUpdateProjectPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasUpdateProjectPayloadWithDefaults() *SchemasUpdateProjectPayload {
	this := SchemasUpdateProjectPayload{}
	return &this
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemasUpdateProjectPayload) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPrivate.Get()
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemasUpdateProjectPayload) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPrivate.Get(), o.IsPrivate.IsSet()
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *SchemasUpdateProjectPayload) HasIsPrivate() bool {
	if o != nil && o.IsPrivate.IsSet() {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given NullableBool and assigns it to the IsPrivate field.
func (o *SchemasUpdateProjectPayload) SetIsPrivate(v bool) {
	o.IsPrivate.Set(&v)
}
// SetIsPrivateNil sets the value for IsPrivate to be an explicit nil
func (o *SchemasUpdateProjectPayload) SetIsPrivateNil() {
	o.IsPrivate.Set(nil)
}

// UnsetIsPrivate ensures that no value is present for IsPrivate, not even an explicit nil
func (o *SchemasUpdateProjectPayload) UnsetIsPrivate() {
	o.IsPrivate.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchemasUpdateProjectPayload) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchemasUpdateProjectPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SchemasUpdateProjectPayload) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SchemasUpdateProjectPayload) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SchemasUpdateProjectPayload) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SchemasUpdateProjectPayload) UnsetName() {
	o.Name.Unset()
}

func (o SchemasUpdateProjectPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasUpdateProjectPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsPrivate.IsSet() {
		toSerialize["isPrivate"] = o.IsPrivate.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableSchemasUpdateProjectPayload struct {
	value *SchemasUpdateProjectPayload
	isSet bool
}

func (v NullableSchemasUpdateProjectPayload) Get() *SchemasUpdateProjectPayload {
	return v.value
}

func (v *NullableSchemasUpdateProjectPayload) Set(val *SchemasUpdateProjectPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasUpdateProjectPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasUpdateProjectPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasUpdateProjectPayload(val *SchemasUpdateProjectPayload) *NullableSchemasUpdateProjectPayload {
	return &NullableSchemasUpdateProjectPayload{value: val, isSet: true}
}

func (v NullableSchemasUpdateProjectPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasUpdateProjectPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


