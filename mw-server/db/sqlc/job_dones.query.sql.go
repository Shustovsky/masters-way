// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: job_dones.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJobDone = `-- name: CreateJobDone :one
INSERT INTO job_dones(
    created_at,
    updated_at,
    description,
    time,
    owner_uuid,
    day_report_uuid
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING uuid, created_at, updated_at, description, time, owner_uuid, day_report_uuid,
    (SELECT name FROM users WHERE uuid = $5) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT job_dones_job_tags.job_tag_uuid
            FROM job_dones_job_tags
            WHERE job_dones.uuid = job_dones_job_tags.job_done_uuid
        ),
    '{}'
    )::VARCHAR[] AS tag_uuids
`

type CreateJobDoneParams struct {
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
}

type CreateJobDoneRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	OwnerName     string           `json:"owner_name"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) CreateJobDone(ctx context.Context, arg CreateJobDoneParams) (CreateJobDoneRow, error) {
	row := q.db.QueryRow(ctx, createJobDone,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.OwnerUuid,
		arg.DayReportUuid,
	)
	var i CreateJobDoneRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.OwnerName,
		&i.TagUuids,
	)
	return i, err
}

const deleteJobDone = `-- name: DeleteJobDone :exec
DELETE FROM job_dones
WHERE uuid = $1
`

func (q *Queries) DeleteJobDone(ctx context.Context, jobDoneUuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteJobDone, jobDoneUuid)
	return err
}

const getIsUserHavingPermissionsForJobDone = `-- name: GetIsUserHavingPermissionsForJobDone :one
SELECT
    ways.uuid as way_uuid,
    ways.name as way_name,
    EXISTS (
        SELECT 1
        FROM mentor_users_ways
        WHERE mentor_users_ways.way_uuid = ways.uuid
        AND mentor_users_ways.user_uuid = $1
    ) OR ways.owner_uuid = $1 AS is_permission_given
FROM ways
INNER JOIN day_reports ON ways.uuid = day_reports.way_uuid
INNER JOIN job_dones ON job_dones.day_report_uuid = day_reports.uuid
WHERE job_dones.uuid = $2
`

type GetIsUserHavingPermissionsForJobDoneParams struct {
	UserUuid     pgtype.UUID `json:"user_uuid"`
	JobDonesUuid pgtype.UUID `json:"job_dones_uuid"`
}

type GetIsUserHavingPermissionsForJobDoneRow struct {
	WayUuid           pgtype.UUID `json:"way_uuid"`
	WayName           string      `json:"way_name"`
	IsPermissionGiven pgtype.Bool `json:"is_permission_given"`
}

func (q *Queries) GetIsUserHavingPermissionsForJobDone(ctx context.Context, arg GetIsUserHavingPermissionsForJobDoneParams) (GetIsUserHavingPermissionsForJobDoneRow, error) {
	row := q.db.QueryRow(ctx, getIsUserHavingPermissionsForJobDone, arg.UserUuid, arg.JobDonesUuid)
	var i GetIsUserHavingPermissionsForJobDoneRow
	err := row.Scan(&i.WayUuid, &i.WayName, &i.IsPermissionGiven)
	return i, err
}

const getListJobsDoneByDayReportId = `-- name: GetListJobsDoneByDayReportId :many
SELECT uuid, created_at, updated_at, description, time, owner_uuid, day_report_uuid FROM job_dones
WHERE job_dones.day_report_uuid = $1
ORDER BY created_at
`

func (q *Queries) GetListJobsDoneByDayReportId(ctx context.Context, dayReportUuid pgtype.UUID) ([]JobDone, error) {
	rows, err := q.db.Query(ctx, getListJobsDoneByDayReportId, dayReportUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JobDone{}
	for rows.Next() {
		var i JobDone
		if err := rows.Scan(
			&i.Uuid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Time,
			&i.OwnerUuid,
			&i.DayReportUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobDone = `-- name: UpdateJobDone :one
UPDATE job_dones
SET
updated_at = coalesce($1, updated_at),
description = coalesce($2, description),
time = coalesce($3, time)
WHERE job_dones.uuid = $4
RETURNING uuid, created_at, updated_at, description, time, owner_uuid, day_report_uuid,
    (SELECT name FROM users WHERE users.uuid = job_dones.owner_uuid) AS owner_name,
    -- get tag uuids
    COALESCE(
        ARRAY(
            SELECT job_dones_job_tags.job_tag_uuid
            FROM job_dones_job_tags
            WHERE job_dones.uuid = job_dones_job_tags.job_done_uuid
        ),
    '{}'
    )::VARCHAR[] AS tag_uuids
`

type UpdateJobDoneParams struct {
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	Description pgtype.Text      `json:"description"`
	Time        pgtype.Int4      `json:"time"`
	Uuid        pgtype.UUID      `json:"uuid"`
}

type UpdateJobDoneRow struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
	Description   string           `json:"description"`
	Time          int32            `json:"time"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	DayReportUuid pgtype.UUID      `json:"day_report_uuid"`
	OwnerName     string           `json:"owner_name"`
	TagUuids      []string         `json:"tag_uuids"`
}

func (q *Queries) UpdateJobDone(ctx context.Context, arg UpdateJobDoneParams) (UpdateJobDoneRow, error) {
	row := q.db.QueryRow(ctx, updateJobDone,
		arg.UpdatedAt,
		arg.Description,
		arg.Time,
		arg.Uuid,
	)
	var i UpdateJobDoneRow
	err := row.Scan(
		&i.Uuid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Time,
		&i.OwnerUuid,
		&i.DayReportUuid,
		&i.OwnerName,
		&i.TagUuids,
	)
	return i, err
}
