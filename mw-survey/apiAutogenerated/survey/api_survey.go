/*
Masters way survey API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"fmt"
	"net/http"
	"net/url"
)


// SurveyAPIService SurveyAPI service
type SurveyAPIService service

type ApiSurveyUserIntroRequest struct {
	ctx context.Context
	ApiService *SurveyAPIService
	deviceId *string
	preferredInterfaceLanguage *string
	role *string
	source *string
	studentExperience *string
	studentGoals *string
	whyRegistered *string
}

func (r ApiSurveyUserIntroRequest) DeviceId(deviceId string) ApiSurveyUserIntroRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiSurveyUserIntroRequest) PreferredInterfaceLanguage(preferredInterfaceLanguage string) ApiSurveyUserIntroRequest {
	r.preferredInterfaceLanguage = &preferredInterfaceLanguage
	return r
}

func (r ApiSurveyUserIntroRequest) Role(role string) ApiSurveyUserIntroRequest {
	r.role = &role
	return r
}

func (r ApiSurveyUserIntroRequest) Source(source string) ApiSurveyUserIntroRequest {
	r.source = &source
	return r
}

func (r ApiSurveyUserIntroRequest) StudentExperience(studentExperience string) ApiSurveyUserIntroRequest {
	r.studentExperience = &studentExperience
	return r
}

func (r ApiSurveyUserIntroRequest) StudentGoals(studentGoals string) ApiSurveyUserIntroRequest {
	r.studentGoals = &studentGoals
	return r
}

func (r ApiSurveyUserIntroRequest) WhyRegistered(whyRegistered string) ApiSurveyUserIntroRequest {
	r.whyRegistered = &whyRegistered
	return r
}

func (r ApiSurveyUserIntroRequest) Execute() (*http.Response, error) {
	return r.ApiService.SurveyUserIntroExecute(r)
}

/*
SurveyUserIntro Post survey user intro

Post survey user intro

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSurveyUserIntroRequest
*/
func (a *SurveyAPIService) SurveyUserIntro(ctx context.Context) ApiSurveyUserIntroRequest {
	return ApiSurveyUserIntroRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SurveyAPIService) SurveyUserIntroExecute(r ApiSurveyUserIntroRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyAPIService.SurveyUserIntro")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/survey/user-intro"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceId == nil {
		return nil, reportError("deviceId is required and must be specified")
	}
	if r.preferredInterfaceLanguage == nil {
		return nil, reportError("preferredInterfaceLanguage is required and must be specified")
	}
	if r.role == nil {
		return nil, reportError("role is required and must be specified")
	}
	if r.source == nil {
		return nil, reportError("source is required and must be specified")
	}
	if r.studentExperience == nil {
		return nil, reportError("studentExperience is required and must be specified")
	}
	if r.studentGoals == nil {
		return nil, reportError("studentGoals is required and must be specified")
	}
	if r.whyRegistered == nil {
		return nil, reportError("whyRegistered is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "deviceId", r.deviceId, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "preferredInterfaceLanguage", r.preferredInterfaceLanguage, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "role", r.role, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "source", r.source, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "studentExperience", r.studentExperience, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "studentGoals", r.studentGoals, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "whyRegistered", r.whyRegistered, "", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// Execute executes the request
func (a *SurveyAPIService) SurveyUserIntroStreamExecute(r ApiSurveyUserIntroRequest, request *http.Request, GoogleAccessToken string) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyAPIService.SurveyUserIntro")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/survey/user-intro"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	fmt.Println(localVarQueryParams)








	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := http.NewRequest(localVarHTTPMethod, localVarPath, request.Body)
	if err != nil {
		return nil, err
	}

	for key, values := range request.Header {
	   if key == "Origin" { continue }
	   for _, value := range values {
	       req.Header.Add(key, value)
	   }
	}

	req.Header.Add("GoogleAccessToken", GoogleAccessToken)

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
