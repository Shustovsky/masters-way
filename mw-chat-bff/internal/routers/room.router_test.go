package routers

import (
	"context"
	"mw-chat-bff/internal/auth"
	"mw-chat-bff/internal/config"
	"mw-chat-bff/internal/controllers"
	"mw-chat-bff/internal/openapi"
	util "mw-chat-bff/internal/utils"
	"net/http"
	"testing"

	openapiChatBFF "mw-chat-bff/apiAutogenerated/mw-chat-bff"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/assert"
)

func TestGetChatPreview(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	chatApi := openapi.MakeChatAPIClient(&newConfig)
	_, err = chatApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset chat db: %v", err)
	}

	userID := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"

	t.Run("should return chat preview with correct unread messages amount", func(t *testing.T) {
		token, err := auth.GenerateTestJWT(newConfig.SecretSessionKey, userID)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		getChatPreviewResponse, response, err := chatApi.RoomAPI.GetChatPreview(ctx).Execute()
		if err != nil {
			t.Fatalf("Failed to get chat preview: %v", err)
		}

		expectedData := openapiChatBFF.SchemasGetRoomPreviewResponse{
			UnreadMessagesAmount: 3,
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.UnreadMessagesAmount, getChatPreviewResponse.UnreadMessagesAmount)
	})
}

func TestCreateRoom(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	chatAPI := openapi.MakeChatAPIClient(&newConfig)
	_, err = chatAPI.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset chat db: %v", err)
	}

	generalAPI := openapi.MakeGeneralAPIClient(&newConfig)
	_, err = generalAPI.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset general db: %v", err)
	}

	chatBFFAPI := openapi.MakeChatBFFAPIClient(&newConfig)

	roomCreatorID := "c31384a6-b811-4a1f-befa-95dd53e3f4b9"
	userID := "45bf9107-83fd-4fc4-8173-a13b8a100f2a"

	token, err := auth.GenerateTestJWT(newConfig.SecretSessionKey, roomCreatorID)
	if err != nil {
		t.Fatalf("Failed to generate JWT: %v", err)
	}

	var userIDNullableString = openapiChatBFF.NullableString{}
	userIDNullableString.Set(&userID)

	var nullableName = openapiChatBFF.NullableString{}
	nullableName.Set(nil)

	request := openapiChatBFF.SchemasCreateRoomPayload{
		Name:     nullableName,
		RoomType: "private",
		UserId:   userIDNullableString,
	}

	t.Run("should create a private room and return it successfully", func(t *testing.T) {
		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		createRoomResponse, response, err := chatBFFAPI.RoomAPI.CreateRoom(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to create private room: %v", err)
		}

		expectedData := openapiChatBFF.SchemasRoomPopulatedResponse{
			Name:      "Bernardo Fallaci",
			ImageUrl:  "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAG",
			RoomType:  controllers.RoomTypePrivate,
			Messages:  []openapiChatBFF.SchemasMessageResponse{},
			IsBlocked: false,
			Users: []openapiChatBFF.SchemasUserResponse{
				{
					UserId:   roomCreatorID,
					Name:     "Celine Vinje",
					ImageUrl: "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAF",
					Role:     "regular",
				},
				{
					UserId:   userID,
					Name:     "Bernardo Fallaci",
					ImageUrl: "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.gettyimages.com%2F&psig=AOvVaw2zWpFWOHXwuTI0x6EM4vXB&ust=1719409370844000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCID3x67x9oYDFQAAAAAdAAAAABAG",
					Role:     "regular",
				},
			},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		diff := cmp.Diff(expectedData, *createRoomResponse, cmpopts.IgnoreFields(openapiChatBFF.SchemasRoomPopulatedResponse{}, "RoomId"))
		assert.True(t, diff == "", "Structures should match except for RoomId")
	})

	t.Run("should return error if private room already exists", func(t *testing.T) {
		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		_, response, err := chatBFFAPI.RoomAPI.CreateRoom(ctx).Request(request).Execute()
		if err != nil {
			message, extractErr := util.ExtractErrorMessageFromResponse(response)
			if extractErr != nil {
				t.Fatalf(extractErr.Error())
			}

			assert.Equal(t, http.StatusInternalServerError, response.StatusCode)
			assert.Equal(t, "chat service error: A private room for these users already exists", message)
		}
	})

	t.Run("should return error if private room is created with a non-existent user", func(t *testing.T) {
		invalidUserID := "10378803-f8cb-4bb9-b948-a5a017b51738"
		var invalidUserIDNullableString = openapiChatBFF.NullableString{}
		invalidUserIDNullableString.Set(&invalidUserID)

		invalidRequest := openapiChatBFF.SchemasCreateRoomPayload{
			Name:     nullableName,
			RoomType: "private",
			UserId:   invalidUserIDNullableString,
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		_, response, err := chatBFFAPI.RoomAPI.CreateRoom(ctx).Request(invalidRequest).Execute()
		if err != nil {
			message, extractErr := util.ExtractErrorMessageFromResponse(response)
			if extractErr != nil {
				t.Fatalf(extractErr.Error())
			}

			assert.Equal(t, http.StatusInternalServerError, response.StatusCode)
			assert.Equal(t, "general service error: User ID "+invalidUserID+" not found in the database", message)
		}
	})
}
