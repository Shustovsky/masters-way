import {
  AddUserToRoomRequest,
  CreateRoomRequest,
  DeleteUserFromRoomRequest,
  GetRoomByIdRequest,
  GetRoomsRequest,
  SchemasGetRoomPreviewResponse,
  SchemasGetRoomsResponse,
  SchemasRoomPopulatedResponse,
  UpdateRoomRequest,
} from "src/apiAutogenerated/chat";
import {chat} from "src/service/services";

/**
 * Provides methods to interact with the chat
 */
export class ChatService {

  /**
   * Create chat room
   */
  public static async createRoom(requestParameters: CreateRoomRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chat.createRoom(requestParameters);

    return groupRoom;
  }

  /**
   * Add user to chat room
   */
  public static async addUserToRoom(requestParameters: AddUserToRoomRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chat.addUserToRoom(requestParameters);

    return groupRoom;
  }

  /**
   * Delete user from chat room
   */
  public static async deleteUserFromRoom(requestParameters: DeleteUserFromRoomRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chat.deleteUserFromRoom(requestParameters);

    return groupRoom;
  }

  /**
   * Get unread message amount in chat room
   */
  public static async getChatPreview(): Promise<SchemasGetRoomPreviewResponse> {
    const groupRoom = await chat.getChatPreview();

    return groupRoom;
  }

  /**
   * Get chat room by ID
   */
  public static async getRoomById(requestParameters: GetRoomByIdRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoom = await chat.getRoomById(requestParameters);

    return groupRoom;
  }

  /**
   * Get chat rooms
   */
  public static async getRooms(requestParameters: GetRoomsRequest): Promise<SchemasGetRoomsResponse> {
    const groupRooms = await chat.getRooms(requestParameters);

    return groupRooms;
  }

  /**
   * Update chat room
   */
  public static async updateRoom(requestParameters: UpdateRoomRequest): Promise<SchemasRoomPopulatedResponse> {
    const groupRoomUpdated = await chat.updateRoom(requestParameters);

    return groupRoomUpdated;
  }

}
