import {
  AiChatRequest,
  AiCommentIssueRequest,
  AiDecomposeIssueRequest,
  AiEstimateIssueRequest,
  AiPlansByMetricsRequest,
  GenerateMetricsRequest,
  SchemasAIChatResponse,
  SchemasAICommentIssueResponse,
  SchemasAIDecomposeIssueResponse,
  SchemasAIEstimateIssueResponse,
  SchemasAIGeneratePlansByMetricResponse,
  SchemasGenerateMetricsResponse,
} from "src/apiAutogenerated/general";
import {aiService} from "src/service/services";

/**
 * Provides methods to interact with the AI
 * TODO: Issue #1558
 */
export class AIService {

  /**
   * Generate metrics based on the goal by AI
   */
  public static async generateMetrics(requestParameters: GenerateMetricsRequest): Promise<SchemasGenerateMetricsResponse> {
    const metrics = await aiService.generateMetrics(requestParameters);

    return metrics;
  }

  /**
   * Generate plans based on metrics by AI
   */
  public static async aiPlansByMetrics(
    requestParameters: AiPlansByMetricsRequest,
  ): Promise<SchemasAIGeneratePlansByMetricResponse> {
    const plans = await aiService.aiPlansByMetrics(requestParameters);

    return plans;
  }

  /**
   * Estimate issue by AI
   */
  public static async aiEstimateIssue(requestParameters: AiEstimateIssueRequest): Promise<SchemasAIEstimateIssueResponse> {
    const estimationMessage = await aiService.aiEstimateIssue(requestParameters);

    return estimationMessage;
  }

  /**
   * Decompose issue by AI
   */
  public static async aiDecomposeIssue(requestParameters: AiDecomposeIssueRequest): Promise<SchemasAIDecomposeIssueResponse> {
    const plans = await aiService.aiDecomposeIssue(requestParameters);

    return plans;
  }

  /**
   * Comment issue by AI
   */
  public static async aiCommentIssue(requestParameters: AiCommentIssueRequest): Promise<SchemasAICommentIssueResponse> {
    const comment = await aiService.aiCommentIssue(requestParameters);

    return comment;
  }

  /**
   * Generate answer based on the message by AI
   */
  public static async aiChat(requestParameters: AiChatRequest): Promise<SchemasAIChatResponse> {
    const message = await aiService.aiChat(requestParameters);

    return message;
  }

}
