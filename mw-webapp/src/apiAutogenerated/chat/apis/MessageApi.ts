// @ts-nocheck
/* eslint-disable */
/**
 * Masters way chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasCreateMessagePayload,
  SchemasMessageResponse,
  SchemasUpdateMessageStatusPayload,
} from '../models/index';
import {
    SchemasCreateMessagePayloadFromJSON,
    SchemasCreateMessagePayloadToJSON,
    SchemasMessageResponseFromJSON,
    SchemasMessageResponseToJSON,
    SchemasUpdateMessageStatusPayloadFromJSON,
    SchemasUpdateMessageStatusPayloadToJSON,
} from '../models/index';

export interface CreateMessageRequest {
    request: SchemasCreateMessagePayload;
}

export interface UpdateMessageStatusRequest {
    messageId: string;
    request: SchemasUpdateMessageStatusPayload;
}

/**
 * 
 */
export class MessageApi extends runtime.BaseAPI {

    /**
     * Create message
     */
    async createMessageRaw(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasMessageResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling createMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasCreateMessagePayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasMessageResponseFromJSON(jsonValue));
    }

    /**
     * Create message
     */
    async createMessage(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasMessageResponse> {
        const response = await this.createMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update message status by message Id
     * Update message status
     */
    async updateMessageStatusRaw(requestParameters: UpdateMessageStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling updateMessageStatus.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling updateMessageStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/messages/{messageId}/message-status`.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SchemasUpdateMessageStatusPayloadToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update message status by message Id
     * Update message status
     */
    async updateMessageStatus(requestParameters: UpdateMessageStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMessageStatusRaw(requestParameters, initOverrides);
    }

}
