// @ts-nocheck
/* eslint-disable */
/**
 * Masters way chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SchemasUploadFileResponse,
} from '../models/index';
import {
    SchemasUploadFileResponseFromJSON,
    SchemasUploadFileResponseToJSON,
} from '../models/index';

export interface DeleteFilesRequest {
    fileIDs: Array<string>;
}

export interface UploadFileRequest {
    roomId: string;
    file: Blob;
}

/**
 * 
 */
export class FileApi extends runtime.BaseAPI {

    /**
     * Delete multiple files from the server storage using their IDs
     * Delete files by IDs
     */
    async deleteFilesRaw(requestParameters: DeleteFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fileIDs === null || requestParameters.fileIDs === undefined) {
            throw new runtime.RequiredError('fileIDs','Required parameter requestParameters.fileIDs was null or undefined when calling deleteFiles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/files`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.fileIDs,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete multiple files from the server storage using their IDs
     * Delete files by IDs
     */
    async deleteFiles(requestParameters: DeleteFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFilesRaw(requestParameters, initOverrides);
    }

    /**
     * Uploads a file to the server and stores it in the designated storage path
     * Upload file to storage
     */
    async uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemasUploadFileResponse>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling uploadFile.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadFile.');
        }

        const queryParameters: any = {};

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemasUploadFileResponseFromJSON(jsonValue));
    }

    /**
     * Uploads a file to the server and stores it in the designated storage path
     * Upload file to storage
     */
    async uploadFile(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemasUploadFileResponse> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
