// @ts-nocheck
/* eslint-disable */
/**
 * Masters way general API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SchemasProblemPopulatedResponse
 */
export interface SchemasProblemPopulatedResponse {
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    dayReportUuid: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof SchemasProblemPopulatedResponse
     */
    isDone: boolean;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    ownerName: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    ownerUuid: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    updatedAt: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    wayName: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProblemPopulatedResponse
     */
    wayUuid: string;
}

/**
 * Check if a given object implements the SchemasProblemPopulatedResponse interface.
 */
export function instanceOfSchemasProblemPopulatedResponse(
    value: object
): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "dayReportUuid" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "isDone" in value;
    isInstance = isInstance && "ownerName" in value;
    isInstance = isInstance && "ownerUuid" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "wayName" in value;
    isInstance = isInstance && "wayUuid" in value;

    return isInstance;
}

export function SchemasProblemPopulatedResponseFromJSON(json: any): SchemasProblemPopulatedResponse {
    return SchemasProblemPopulatedResponseFromJSONTyped(json, false);
}

export function SchemasProblemPopulatedResponseFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): SchemasProblemPopulatedResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': json['createdAt'],
        'dayReportUuid': json['dayReportUuid'],
        'description': json['description'],
        'isDone': json['isDone'],
        'ownerName': json['ownerName'],
        'ownerUuid': json['ownerUuid'],
        'updatedAt': json['updatedAt'],
        'uuid': json['uuid'],
        'wayName': json['wayName'],
        'wayUuid': json['wayUuid'],
    };
}


export function SchemasProblemPopulatedResponseToJSON(value?: SchemasProblemPopulatedResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': value.createdAt,
        'dayReportUuid': value.dayReportUuid,
        'description': value.description,
        'isDone': value.isDone,
        'ownerName': value.ownerName,
        'ownerUuid': value.ownerUuid,
        'updatedAt': value.updatedAt,
        'uuid': value.uuid,
        'wayName': value.wayName,
        'wayUuid': value.wayUuid,
    };
}

