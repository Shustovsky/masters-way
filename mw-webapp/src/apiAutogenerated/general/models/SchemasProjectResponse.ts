// @ts-nocheck
/* eslint-disable */
/**
 * Masters way general API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SchemasUserPlainResponseWithInfo } from './SchemasUserPlainResponseWithInfo';
import {
    SchemasUserPlainResponseWithInfoFromJSON,
    SchemasUserPlainResponseWithInfoFromJSONTyped,
    SchemasUserPlainResponseWithInfoToJSON,
} from './SchemasUserPlainResponseWithInfo';
import type { SchemasWayPlainResponse } from './SchemasWayPlainResponse';
import {
    SchemasWayPlainResponseFromJSON,
    SchemasWayPlainResponseFromJSONTyped,
    SchemasWayPlainResponseToJSON,
} from './SchemasWayPlainResponse';

/**
 * 
 * @export
 * @interface SchemasProjectResponse
 */
export interface SchemasProjectResponse {
    /**
     * 
     * @type {string}
     * @memberof SchemasProjectResponse
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof SchemasProjectResponse
     */
    isPrivate: boolean;
    /**
     * 
     * @type {string}
     * @memberof SchemasProjectResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SchemasProjectResponse
     */
    ownerId: string;
    /**
     * 
     * @type {Array<SchemasUserPlainResponseWithInfo>}
     * @memberof SchemasProjectResponse
     */
    users: Array<SchemasUserPlainResponseWithInfo>;
    /**
     * 
     * @type {Array<SchemasWayPlainResponse>}
     * @memberof SchemasProjectResponse
     */
    ways: Array<SchemasWayPlainResponse>;
}

/**
 * Check if a given object implements the SchemasProjectResponse interface.
 */
export function instanceOfSchemasProjectResponse(
    value: object
): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "isPrivate" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "ownerId" in value;
    isInstance = isInstance && "users" in value;
    isInstance = isInstance && "ways" in value;

    return isInstance;
}

export function SchemasProjectResponseFromJSON(json: any): SchemasProjectResponse {
    return SchemasProjectResponseFromJSONTyped(json, false);
}

export function SchemasProjectResponseFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean
): SchemasProjectResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'isPrivate': json['isPrivate'],
        'name': json['name'],
        'ownerId': json['ownerId'],
        'users': ((json['users'] as Array<any>).map(SchemasUserPlainResponseWithInfoFromJSON)),
        'ways': ((json['ways'] as Array<any>).map(SchemasWayPlainResponseFromJSON)),
    };
}


export function SchemasProjectResponseToJSON(value?: SchemasProjectResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'isPrivate': value.isPrivate,
        'name': value.name,
        'ownerId': value.ownerId,
        'users': ((value.users as Array<any>).map(SchemasUserPlainResponseWithInfoToJSON)),
        'ways': ((value.ways as Array<any>).map(SchemasWayPlainResponseToJSON)),
    };
}

