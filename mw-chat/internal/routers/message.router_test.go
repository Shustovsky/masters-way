package routers

import (
	"context"
	"mwchat/internal/auth"
	"mwchat/internal/config"
	"mwchat/internal/openapi"
	"net/http"
	"testing"

	openapiChat "mwchat/apiAutogenerated/chat"

	"github.com/stretchr/testify/assert"
)

func TestCreateMessage(t *testing.T) {
	newConfig, err := config.LoadConfig("../../")
	if err != nil {
		t.Fatalf("Failed to load config: %v", err)
	}

	chatApi := openapi.MakeChatAPIClient(&newConfig)
	_, err = chatApi.DevAPI.DevResetDbGet(context.Background()).Execute()
	if err != nil {
		t.Fatalf("Failed to reset db: %v", err)
	}

	currentUserID := "d2cb5e1b-44df-48d3-b7a1-34f3d7a5b7e2"
	userID := "3d922e8a-5d58-4b82-9a3d-83e2e73b3f91"
	roomID := "78bdf878-3b83-4f97-8d2e-928c132a10cd"

	t.Run("should create a message in private room and return it successfully", func(t *testing.T) {
		token, err := auth.GenerateTestJWT(newConfig.SecretSessionKey, currentUserID)
		if err != nil {
			t.Fatalf("Failed to generate JWT: %v", err)
		}

		request := openapiChat.SchemasCreateMessagePayload{
			Message: "roomCreator's message",
			RoomId:  roomID,
		}

		ctx := context.WithValue(context.Background(), auth.ContextKeyAuthorization, "Bearer "+token)
		createMessageResponse, response, err := chatApi.MessageAPI.CreateMessage(ctx).Request(request).Execute()
		if err != nil {
			t.Fatalf("Failed to get chat preview: %v", err)
		}

		expectedData := &openapiChat.SchemasCreateMessageResponse{
			Users: []string{currentUserID, userID},
			Message: openapiChat.SchemasMessageResponse{
				OwnerId:        currentUserID,
				Message:        "roomCreator's message",
				MessageReaders: []openapiChat.SchemasMessageReader{},
			},
		}

		assert.Equal(t, http.StatusOK, response.StatusCode)
		assert.Equal(t, expectedData.Users, createMessageResponse.Users)
		assert.Equal(t, expectedData.Message.Message, createMessageResponse.Message.Message)
		assert.Equal(t, expectedData.Message.OwnerId, createMessageResponse.Message.OwnerId)
		assert.Equal(t, expectedData.Message.MessageReaders, createMessageResponse.Message.MessageReaders)
	})
}
