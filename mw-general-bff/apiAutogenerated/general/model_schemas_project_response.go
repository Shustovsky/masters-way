/*
Masters way general API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchemasProjectResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemasProjectResponse{}

// SchemasProjectResponse struct for SchemasProjectResponse
type SchemasProjectResponse struct {
	Id string
	IsPrivate bool
	Name string
	OwnerId string
	Users []SchemasUserPlainResponseWithInfo
	Ways []SchemasWayPlainResponse
}

type _SchemasProjectResponse SchemasProjectResponse

// NewSchemasProjectResponse instantiates a new SchemasProjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemasProjectResponse(id string, isPrivate bool, name string, ownerId string, users []SchemasUserPlainResponseWithInfo, ways []SchemasWayPlainResponse) *SchemasProjectResponse {
	this := SchemasProjectResponse{}
	this.Id = id
	this.IsPrivate = isPrivate
	this.Name = name
	this.OwnerId = ownerId
	this.Users = users
	this.Ways = ways
	return &this
}

// NewSchemasProjectResponseWithDefaults instantiates a new SchemasProjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemasProjectResponseWithDefaults() *SchemasProjectResponse {
	this := SchemasProjectResponse{}
	return &this
}

// GetId returns the Id field value
func (o *SchemasProjectResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SchemasProjectResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SchemasProjectResponse) SetId(v string) {
	o.Id = v
}

// GetIsPrivate returns the IsPrivate field value
func (o *SchemasProjectResponse) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *SchemasProjectResponse) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *SchemasProjectResponse) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetName returns the Name field value
func (o *SchemasProjectResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SchemasProjectResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SchemasProjectResponse) SetName(v string) {
	o.Name = v
}

// GetOwnerId returns the OwnerId field value
func (o *SchemasProjectResponse) GetOwnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value
// and a boolean to check if the value has been set.
func (o *SchemasProjectResponse) GetOwnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerId, true
}

// SetOwnerId sets field value
func (o *SchemasProjectResponse) SetOwnerId(v string) {
	o.OwnerId = v
}

// GetUsers returns the Users field value
func (o *SchemasProjectResponse) GetUsers() []SchemasUserPlainResponseWithInfo {
	if o == nil {
		var ret []SchemasUserPlainResponseWithInfo
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *SchemasProjectResponse) GetUsersOk() ([]SchemasUserPlainResponseWithInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *SchemasProjectResponse) SetUsers(v []SchemasUserPlainResponseWithInfo) {
	o.Users = v
}

// GetWays returns the Ways field value
func (o *SchemasProjectResponse) GetWays() []SchemasWayPlainResponse {
	if o == nil {
		var ret []SchemasWayPlainResponse
		return ret
	}

	return o.Ways
}

// GetWaysOk returns a tuple with the Ways field value
// and a boolean to check if the value has been set.
func (o *SchemasProjectResponse) GetWaysOk() ([]SchemasWayPlainResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ways, true
}

// SetWays sets field value
func (o *SchemasProjectResponse) SetWays(v []SchemasWayPlainResponse) {
	o.Ways = v
}

func (o SchemasProjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemasProjectResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["isPrivate"] = o.IsPrivate
	toSerialize["name"] = o.Name
	toSerialize["ownerId"] = o.OwnerId
	toSerialize["users"] = o.Users
	toSerialize["ways"] = o.Ways
	return toSerialize, nil
}

func (o *SchemasProjectResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"isPrivate",
		"name",
		"ownerId",
		"users",
		"ways",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemasProjectResponse := _SchemasProjectResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemasProjectResponse)

	if err != nil {
		return err
	}

	*o = SchemasProjectResponse(varSchemasProjectResponse)

	return err
}

type NullableSchemasProjectResponse struct {
	value *SchemasProjectResponse
	isSet bool
}

func (v NullableSchemasProjectResponse) Get() *SchemasProjectResponse {
	return v.value
}

func (v *NullableSchemasProjectResponse) Set(val *SchemasProjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemasProjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemasProjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemasProjectResponse(val *SchemasProjectResponse) *NullableSchemasProjectResponse {
	return &NullableSchemasProjectResponse{value: val, isSet: true}
}

func (v NullableSchemasProjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemasProjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


