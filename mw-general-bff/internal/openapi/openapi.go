package openapi

import (
	openapiGeneral "mw-general-bff/apiAutogenerated/general"
	openapiGeneralBFF "mw-general-bff/apiAutogenerated/mw-general-bff"
	openapiNotification "mw-general-bff/apiAutogenerated/mw-notification"
	openapiStorage "mw-general-bff/apiAutogenerated/mw-storage"
	"mw-general-bff/internal/auth"
	"mw-general-bff/internal/config"
	"net/http"
)

type authTransport struct {
	rt http.RoundTripper
}

func (t *authTransport) RoundTrip(req *http.Request) (*http.Response, error) {
	ctx := req.Context()
	if token, ok := ctx.Value(auth.ContextKeyAuthorization).(string); ok {
		req.Header.Set(auth.HeaderKeyAuthorization, token)
	}
	return t.rt.RoundTrip(req)
}

func MakeGeneralAPIClient(cfg *config.Config) *openapiGeneral.APIClient {
	generalAPIConfig := &openapiGeneral.Configuration{
		Host:   cfg.GeneralAPIHost,
		Scheme: "http",
		Servers: openapiGeneral.ServerConfigurations{
			{
				URL:         cfg.GeneralBaseURL,
				Description: "mw-general",
			},
		},
		HTTPClient: &http.Client{
			Transport: &authTransport{rt: http.DefaultTransport},
		},
	}
	return openapiGeneral.NewAPIClient(generalAPIConfig)
}

func MakeNotificaionAPIClient(cfg *config.Config) *openapiNotification.APIClient {
	notificationAPIConfig := &openapiNotification.Configuration{
		Host:   cfg.NotificationAPIHost,
		Scheme: "http",
		Servers: openapiNotification.ServerConfigurations{
			{
				URL:         cfg.NotificationBaseURL,
				Description: "mw-notification",
			},
		},
		HTTPClient: &http.Client{
			Transport: &authTransport{rt: http.DefaultTransport},
		},
	}
	return openapiNotification.NewAPIClient(notificationAPIConfig)
}

func MakeGeneralBFFAPIClient(cfg *config.Config) *openapiGeneralBFF.APIClient {
	chatBFFAPIConfig := &openapiGeneralBFF.Configuration{
		Host:   cfg.TestGeneralBffAPIHost,
		Scheme: "http",
		Servers: openapiGeneralBFF.ServerConfigurations{
			{
				URL:         cfg.TestGeneralBffAPIBaseUrl,
				Description: "mw-general-bff",
			},
		},
		HTTPClient: &http.Client{
			Transport: &authTransport{rt: http.DefaultTransport},
		},
	}
	return openapiGeneralBFF.NewAPIClient(chatBFFAPIConfig)
}

func MakeStorageAPIClient(cfg *config.Config) *openapiStorage.APIClient {
	storageAPIConfig := &openapiStorage.Configuration{
		Host:   cfg.StorageAPIHost,
		Scheme: "http",
		Servers: openapiStorage.ServerConfigurations{
			{
				URL:         cfg.StorageBaseURL,
				Description: "mw-storage",
			},
		},
		HTTPClient: &http.Client{
			Transport: &authTransport{rt: http.DefaultTransport},
		},
	}
	return openapiStorage.NewAPIClient(storageAPIConfig)
}
