// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type StorageType string

const (
	StorageTypeGoogleDrive StorageType = "google_drive"
)

func (e *StorageType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StorageType(s)
	case string:
		*e = StorageType(s)
	default:
		return fmt.Errorf("unsupported scan type for StorageType: %T", src)
	}
	return nil
}

type NullStorageType struct {
	StorageType StorageType `json:"storage_type"`
	Valid       bool        `json:"valid"` // Valid is true if StorageType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStorageType) Scan(value interface{}) error {
	if value == nil {
		ns.StorageType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StorageType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStorageType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StorageType), nil
}

type File struct {
	Uuid          pgtype.UUID      `json:"uuid"`
	Name          string           `json:"name"`
	SrcUrl        string           `json:"src_url"`
	PreviewUrl    pgtype.Text      `json:"preview_url"`
	StorageType   StorageType      `json:"storage_type"`
	GoogleDriveID pgtype.Text      `json:"google_drive_id"`
	OwnerUuid     pgtype.UUID      `json:"owner_uuid"`
	Size          int64            `json:"size"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}
