// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type FileExtension string

const (
	FileExtensionWebp FileExtension = "webp"
	FileExtensionMp4  FileExtension = "mp4"
	FileExtensionMp3  FileExtension = "mp3"
)

func (e *FileExtension) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FileExtension(s)
	case string:
		*e = FileExtension(s)
	default:
		return fmt.Errorf("unsupported scan type for FileExtension: %T", src)
	}
	return nil
}

type NullFileExtension struct {
	FileExtension FileExtension `json:"file_extension"`
	Valid         bool          `json:"valid"` // Valid is true if FileExtension is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFileExtension) Scan(value interface{}) error {
	if value == nil {
		ns.FileExtension, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FileExtension.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFileExtension) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FileExtension), nil
}

type File struct {
	Uuid      pgtype.UUID      `json:"uuid"`
	Link      pgtype.Text      `json:"link"`
	OwnerId   pgtype.UUID      `json:"ownerId"`
	Size      int64            `json:"size"`
	Type      FileExtension    `json:"type"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}
