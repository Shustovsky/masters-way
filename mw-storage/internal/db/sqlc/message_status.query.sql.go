// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message_status.query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessageStatus = `-- name: CreateMessageStatus :exec
WITH room_users AS (
    SELECT user_uuid
    FROM users_rooms
    WHERE room_uuid = $2 AND user_uuid != $3
)
INSERT INTO message_status (message_uuid, receiver_uuid, is_read)
SELECT $1, user_uuid, false
FROM room_users
`

type CreateMessageStatusParams struct {
	MessageUuid pgtype.UUID `json:"message_uuid"`
	RoomUuid    pgtype.UUID `json:"room_uuid"`
	UserUuid    pgtype.UUID `json:"user_uuid"`
}

func (q *Queries) CreateMessageStatus(ctx context.Context, arg CreateMessageStatusParams) error {
	_, err := q.db.Exec(ctx, createMessageStatus, arg.MessageUuid, arg.RoomUuid, arg.UserUuid)
	return err
}

const setAllRoomMessagesAsRead = `-- name: SetAllRoomMessagesAsRead :exec
UPDATE message_status
SET is_read = true
FROM messages
WHERE message_status.message_uuid = messages.uuid
    AND messages.room_uuid = $1
    AND message_status.receiver_uuid = $2
    AND message_status.is_read = false
`

type SetAllRoomMessagesAsReadParams struct {
	RoomUuid pgtype.UUID `json:"room_uuid"`
	UserUuid pgtype.UUID `json:"user_uuid"`
}

func (q *Queries) SetAllRoomMessagesAsRead(ctx context.Context, arg SetAllRoomMessagesAsReadParams) error {
	_, err := q.db.Exec(ctx, setAllRoomMessagesAsRead, arg.RoomUuid, arg.UserUuid)
	return err
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
UPDATE message_status
SET is_read = $1
WHERE message_status.message_uuid = $2
    AND message_status.receiver_uuid = $3
`

type UpdateMessageStatusParams struct {
	IsRead      bool        `json:"is_read"`
	MessageUuid pgtype.UUID `json:"message_uuid"`
	UserUuid    pgtype.UUID `json:"user_uuid"`
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.Exec(ctx, updateMessageStatus, arg.IsRead, arg.MessageUuid, arg.UserUuid)
	return err
}
